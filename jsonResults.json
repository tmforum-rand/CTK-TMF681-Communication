{
  "collection": {
    "_": {
      "postman_id": "ec552633-83db-4591-9ac4-75e27e6ae8a3"
    },
    "item": [
      {
        "id": "dbf66624-b5b8-4ed9-bd29-74b75545479c",
        "name": "N1",
        "item": [
          {
            "id": "0c1515d9-1bee-4a77-9408-0558420908f1",
            "name": "/communicationMessage",
            "request": {
              "description": {
                "content": "This operation creates a CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"content\":\"Dear $Parameter1. Here is the information of the promotion $Parameter2\",\"messageType\":\"SMS\",\"receiver\":[{}],\"sender\":{}}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "af725632-10ab-4f1a-9749-f20d7f539fed",
                  "type": "text/javascript",
                  "exec": [
                    "var jsonData = pm.response.json();",
                    "",
                    "if (Array.isArray(jsonData)) { ",
                    "  ",
                    "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                    "  ",
                    "",
                    "}",
                    "",
                    "pm.test(\"Status code is 201\", function () {",
                    "  pm.response.to.have.status(201);",
                    "});",
                    "",
                    "var instance = pm.response.json();",
                    "var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                    "",
                    "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "",
                    "",
                    "",
                    "pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                    "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                    "pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                    "",
                    "pm.globals.set('CONTENTCM01', instance['content']);",
                    "pm.globals.set('HREFCM01', instance['href']);",
                    "pm.globals.set('IDCM01', instance['id']);",
                    "pm.globals.set('MESSAGETYPECM01', instance['messageType']);",
                    "",
                    "pm.test('Body includes value held on content', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['content']);",
                    "});",
                    "pm.test('Body includes value held on href', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['href']);",
                    "});",
                    "pm.test('Body includes value held on id', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['id']);",
                    "});",
                    "pm.test('Body includes value held on messageType', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['messageType']);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "522b817e-5911-452b-b46c-8681eb80f2f3"
                }
              }
            ]
          },
          {
            "id": "2cf9f1ab-3455-4d60-8fee-715ac4f6fcf6",
            "name": "/communicationMessage",
            "request": {
              "description": {
                "content": "This operation search for the created CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "172b5123-1758-4e5d-9b2c-587a1c06f863",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                    "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                    "      ",
                    "        pm.test('Body includes value held on content', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['content']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on messageType', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM02\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM02');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM02\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM02');});",
                    "        }  ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                    "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                    "      ",
                    "        pm.test('Body includes value held on content', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['content']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on messageType', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM02\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM02');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM02');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM02\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM02');});",
                    "        }",
                    "   ",
                    "  }",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "56885b6a-269e-4bb6-8b6b-2d7b226cc992"
                }
              }
            ]
          },
          {
            "id": "d51afe03-8d00-462e-a491-57e6833ad92b",
            "name": "/communicationMessage/{{IDCM01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDCM01}}"
                ],
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e9adaad1-6647-40cf-b894-b9cba4bdc834",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                    "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                    "      ",
                    "        pm.test('Body includes value held on content', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['content']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on messageType', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                    "            pm.test('IDCM02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                    "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                    "      ",
                    "        pm.test('Body includes value held on content', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['content']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on messageType', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                    "            pm.test('IDCM02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "e15985dd-b3ed-4117-af2b-f2f021498761"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "ce75651d-f7e6-496f-86f6-c461efb621aa",
        "name": "N2",
        "item": [
          {
            "id": "305a933b-e788-4d74-b9e5-cafeb1efe712",
            "name": "/communicationMessage?fields=content",
            "request": {
              "description": {
                "content": "This operation filter a CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "content"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6416a623-3204-472f-8885-81b448fdd41b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f14740a7-bf57-4616-92a0-dbc907698ea9"
                }
              }
            ]
          },
          {
            "id": "ccc1a0de-7d4a-4148-bba1-6fe77abf5c1a",
            "name": "/communicationMessage?content='{{CONTENTCM01}}'",
            "request": {
              "description": {
                "content": "This operation filter a CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [
                  {
                    "key": "content",
                    "value": "{{CONTENTCM01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3332563f-d725-4ef6-8a0f-5548d7d0371e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                    "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                    "      ",
                    "        pm.test('Body includes value held on content', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['content']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on messageType', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                    "            pm.test('IDCM02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                    "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                    "      ",
                    "        pm.test('Body includes value held on content', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['content']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on messageType', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                    "            pm.test('IDCM02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "9d260dd1-0a30-4b22-876b-5078ed279f37"
                }
              }
            ]
          },
          {
            "id": "e2f30ca6-8fa0-49d3-a919-21533d954147",
            "name": "/communicationMessage?fields=href",
            "request": {
              "description": {
                "content": "This operation filter a CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "href"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e3e95f78-73c9-4bbe-8b32-f010b56bdf3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0187bbb5-5db0-46cb-a90a-1e079343cb5f"
                }
              }
            ]
          },
          {
            "id": "c53c416a-3c46-4490-ac18-37d398876e1b",
            "name": "/communicationMessage?fields=id",
            "request": {
              "description": {
                "content": "This operation filter a CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "id"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8b8d74bb-184c-4885-9b9b-1abcefc474a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bef1b443-2f3d-4923-b6f7-f1edb2095dd7"
                }
              }
            ]
          },
          {
            "id": "b0ebc9ee-fce6-4599-a50b-a5676de06022",
            "name": "/communicationMessage?id={{IDCM01}}",
            "request": {
              "description": {
                "content": "This operation filter a CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{IDCM01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3a2a1e98-86ad-49d2-bbf8-4878f3d2ce10",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                    "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                    "      ",
                    "        pm.test('Body includes value held on content', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['content']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on messageType', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                    "            pm.test('IDCM02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                    "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                    "      ",
                    "        pm.test('Body includes value held on content', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['content']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on messageType', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                    "            pm.test('IDCM02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "da74f9a5-383a-424c-bdf5-9eaac08434c7"
                }
              }
            ]
          },
          {
            "id": "248e0bde-efe4-4bd9-b957-96de2471c71f",
            "name": "/communicationMessage?fields=messageType",
            "request": {
              "description": {
                "content": "This operation filter a CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "messageType"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "41d60a06-6ad2-4cb5-b7dd-b0afd6a70f2b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4d6adf94-d47a-4652-941e-01530b110690"
                }
              }
            ]
          },
          {
            "id": "b55b1658-a96c-4abf-bd9f-a0dfedb657ff",
            "name": "/communicationMessage?messageType={{MESSAGETYPECM01}}",
            "request": {
              "description": {
                "content": "This operation filter a CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [
                  {
                    "key": "messageType",
                    "value": "{{MESSAGETYPECM01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "aa7a15da-3fe5-4286-b165-aaa0bda36361",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                    "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                    "      ",
                    "        pm.test('Body includes value held on content', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['content']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on messageType', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                    "            pm.test('IDCM02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                    "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                    "      ",
                    "        pm.test('Body includes value held on content', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['content']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on messageType', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                    "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                    "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                    "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                    "            pm.test('IDCM02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "67edca35-f4e3-4489-83ee-79ab4dba1376"
                }
              }
            ]
          },
          {
            "id": "ac185dae-d2c3-4049-aab0-9520d88d55c7",
            "name": "/communicationMessage/{{IDCM01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDCM01}}"
                ],
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e9b851cd-fdf1-479f-a8cd-ea07d31c23f1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 204\", function () {",
                    "    pm.response.to.have.status(204);",
                    "});",
                    "  ",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "e33a60fa-dd4a-4109-80d6-22c9939a5f05"
                }
              }
            ]
          },
          {
            "id": "20765e9f-3166-425c-8164-b4ed6621f75c",
            "name": "/communicationMessage/{{IDCM01}}404",
            "request": {
              "description": {
                "content": "This operation search for one of the created CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDCM01}}"
                ],
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ac2a98e4-1aeb-447e-a9b9-7dc50ed6a17f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "338c74fd-14c8-4984-a3ad-b2abb55213b3"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "a81a9ef6-8c92-417f-a633-780e3024365c",
        "name": "E1",
        "item": [
          {
            "id": "b75cf26d-6db9-47e9-848d-588067ceaae2",
            "name": "/communicationMessage/404ID",
            "request": {
              "description": {
                "content": "This operation search for one of the created CommunicationMessage",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "8ce13dbe-ab17-45a3-bef7-f4207fd827fd"
                ],
                "host": [
                  "{{Communication}}communicationMessage"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a7432bba-cca2-4be0-abd8-a83c28849777",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "7d68d274-c68a-40cf-9854-e2a204a7b7de"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      }
    ],
    "event": [],
    "protocolProfileBehavior": {},
    "variable": [],
    "info": {
      "_postman_id": "ec552633-83db-4591-9ac4-75e27e6ae8a3",
      "name": "CTK-Communication-4.0.0",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2020-07-07T14:17:10.805Z",
      "postman_exported_using": "Postman/7.27.1"
    },
    "id": "da32588a-3916-4d78-a546-7623e391f650",
    "name": "TMForumv4",
    "values": [
      {
        "type": "any",
        "value": " http://localhost:8681/tmf-api/communicationManagement/v4/",
        "key": "Communication"
      }
    ]
  },
  "globals": {
    "id": "ed23b05f-2a14-437c-b04d-7cab670884c3",
    "values": [
      {
        "type": "any",
        "value": "Dear $Parameter1. Here is the information of the promotion $Parameter2",
        "key": "CONTENTCM01"
      },
      {
        "type": "any",
        "value": "http://localhost:8681/tmf-api/communicationManagement/v4/communicationMessage/031b58be-8903-44fc-9b79-9e0d34cbb3ff",
        "key": "HREFCM01"
      },
      {
        "type": "any",
        "value": "031b58be-8903-44fc-9b79-9e0d34cbb3ff",
        "key": "IDCM01"
      },
      {
        "type": "any",
        "value": "SMS",
        "key": "MESSAGETYPECM01"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 89,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 13,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 6.923076923076923,
      "responseMin": 3,
      "responseMax": 32,
      "responseSd": 7.3008064724336466,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1602863014228,
      "completed": 1602863014536
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 13,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3cfa4032-d0b9-4f3e-a9e6-d66ceaecacf7",
          "httpRequestId": "f6052a5a-789a-4f14-8b2f-11a004d5446f"
        },
        "item": {
          "id": "0c1515d9-1bee-4a77-9408-0558420908f1",
          "name": "/communicationMessage",
          "request": {
            "description": {
              "content": "This operation creates a CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"content\":\"Dear $Parameter1. Here is the information of the promotion $Parameter2\",\"messageType\":\"SMS\",\"receiver\":[{}],\"sender\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "af725632-10ab-4f1a-9749-f20d7f539fed",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                  "pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                  "",
                  "pm.globals.set('CONTENTCM01', instance['content']);",
                  "pm.globals.set('HREFCM01', instance['href']);",
                  "pm.globals.set('IDCM01', instance['id']);",
                  "pm.globals.set('MESSAGETYPECM01', instance['messageType']);",
                  "",
                  "pm.test('Body includes value held on content', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['content']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on messageType', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['messageType']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "522b817e-5911-452b-b46c-8681eb80f2f3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation creates a CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e7179439-20ce-4199-9bae-51601d9da3dd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 132,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"content\":\"Dear $Parameter1. Here is the information of the promotion $Parameter2\",\"messageType\":\"SMS\",\"receiver\":[{}],\"sender\":{}}"
          }
        },
        "response": {
          "id": "280a4530-712b-4c12-b5d8-34db6950a43e",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Location",
              "value": "http://localhost:8681/tmf-api/communicationManagement/v4/communicationMessage/031b58be-8903-44fc-9b79-9e0d34cbb3ff"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "300"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              68,
              101,
              97,
              114,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              49,
              46,
              32,
              72,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              109,
              111,
              116,
              105,
              111,
              110,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              50,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              77,
              83,
              34,
              44,
              34,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              114,
              34,
              58,
              91,
              123,
              125,
              93,
              44,
              34,
              115,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              123,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              54,
              56,
              49,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 32,
          "responseSize": 300
        },
        "id": "0c1515d9-1bee-4a77-9408-0558420908f1",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has content attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has messageType attribute",
            "skipped": false
          },
          {
            "assertion": "Response has receiver attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on content",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on messageType",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7a34b34e-8739-4ed9-9935-fb932e0a37f2",
          "length": 13,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c36b06f9-51f8-47b0-96a2-d008775f2174"
        },
        "item": {
          "id": "2cf9f1ab-3455-4d60-8fee-715ac4f6fcf6",
          "name": "/communicationMessage",
          "request": {
            "description": {
              "content": "This operation search for the created CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "172b5123-1758-4e5d-9b2c-587a1c06f863",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                  "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                  "      ",
                  "        pm.test('Body includes value held on content', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['content']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on messageType', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM02\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM02');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM02\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM02');});",
                  "        }  ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                  "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                  "      ",
                  "        pm.test('Body includes value held on content', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['content']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on messageType', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM02\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM02');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM02');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM02\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM02');});",
                  "        }",
                  "   ",
                  "  }",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "56885b6a-269e-4bb6-8b6b-2d7b226cc992"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for the created CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "21b8e312-306b-4381-9783-8fac659fabb9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c855a2e5-7424-4c89-9767-ea608345bbab",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "302"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              68,
              101,
              97,
              114,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              49,
              46,
              32,
              72,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              109,
              111,
              116,
              105,
              111,
              110,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              50,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              77,
              83,
              34,
              44,
              34,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              114,
              34,
              58,
              91,
              123,
              125,
              93,
              44,
              34,
              115,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              123,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              54,
              56,
              49,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 302
        },
        "id": "2cf9f1ab-3455-4d60-8fee-715ac4f6fcf6",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has content attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has messageType attribute",
            "skipped": false
          },
          {
            "assertion": "Response has receiver attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on content",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on messageType",
            "skipped": false
          },
          {
            "assertion": "content is Dear $Parameter1. Here is the information of the promotion $Parameter2",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8681/tmf-api/communicationManagement/v4/communicationMessage/031b58be-8903-44fc-9b79-9e0d34cbb3ff",
            "skipped": false
          },
          {
            "assertion": "id is 031b58be-8903-44fc-9b79-9e0d34cbb3ff",
            "skipped": false
          },
          {
            "assertion": "messageType is SMS",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f9c5b0d0-9388-491a-bd15-7aa32028881f",
          "length": 13,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6d03c677-7ccb-474a-a8ac-6d0727c8b803"
        },
        "item": {
          "id": "d51afe03-8d00-462e-a491-57e6833ad92b",
          "name": "/communicationMessage/{{IDCM01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDCM01}}"
              ],
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e9adaad1-6647-40cf-b894-b9cba4bdc834",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                  "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                  "      ",
                  "        pm.test('Body includes value held on content', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['content']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on messageType', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                  "            pm.test('IDCM02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                  "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                  "      ",
                  "        pm.test('Body includes value held on content', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['content']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on messageType', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                  "            pm.test('IDCM02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "e15985dd-b3ed-4117-af2b-f2f021498761"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage",
              "031b58be-8903-44fc-9b79-9e0d34cbb3ff"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5a9bc3e0-c1eb-42f7-ab72-bde182be1ef7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "06fa466e-276b-4427-8e11-9567e986157b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Location",
              "value": "http://localhost:8681/tmf-api/communicationManagement/v4/communicationMessage/031b58be-8903-44fc-9b79-9e0d34cbb3ff"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "300"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              68,
              101,
              97,
              114,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              49,
              46,
              32,
              72,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              109,
              111,
              116,
              105,
              111,
              110,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              50,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              77,
              83,
              34,
              44,
              34,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              114,
              34,
              58,
              91,
              123,
              125,
              93,
              44,
              34,
              115,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              123,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              54,
              56,
              49,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 300
        },
        "id": "d51afe03-8d00-462e-a491-57e6833ad92b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has content attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has messageType attribute",
            "skipped": false
          },
          {
            "assertion": "Response has receiver attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on content",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on messageType",
            "skipped": false
          },
          {
            "assertion": "content is Dear $Parameter1. Here is the information of the promotion $Parameter2",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8681/tmf-api/communicationManagement/v4/communicationMessage/031b58be-8903-44fc-9b79-9e0d34cbb3ff",
            "skipped": false
          },
          {
            "assertion": "id is 031b58be-8903-44fc-9b79-9e0d34cbb3ff",
            "skipped": false
          },
          {
            "assertion": "messageType is SMS",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "56adb929-c6f6-44db-9a8e-8a0237dcfd01",
          "length": 13,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "97925921-da28-4c7f-ae6b-f825d7b84dd7"
        },
        "item": {
          "id": "305a933b-e788-4d74-b9e5-cafeb1efe712",
          "name": "/communicationMessage?fields=content",
          "request": {
            "description": {
              "content": "This operation filter a CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "content"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6416a623-3204-472f-8885-81b448fdd41b",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f14740a7-bf57-4616-92a0-dbc907698ea9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "content"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "593de355-4526-4ec3-9204-17b40fbf7c6d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5fe25a2f-b468-405f-b907-4970274a7de9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "254"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              68,
              101,
              97,
              114,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              49,
              46,
              32,
              72,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              109,
              111,
              116,
              105,
              111,
              110,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              50,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              54,
              56,
              49,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 254
        },
        "id": "305a933b-e788-4d74-b9e5-cafeb1efe712"
      },
      {
        "cursor": {
          "ref": "99edc7e3-5f95-4fd1-bb90-90769950a76f",
          "length": 13,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ee126230-4c08-485b-bc97-1b01b412b18d"
        },
        "item": {
          "id": "ccc1a0de-7d4a-4148-bba1-6fe77abf5c1a",
          "name": "/communicationMessage?content='{{CONTENTCM01}}'",
          "request": {
            "description": {
              "content": "This operation filter a CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [
                {
                  "key": "content",
                  "value": "{{CONTENTCM01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3332563f-d725-4ef6-8a0f-5548d7d0371e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                  "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                  "      ",
                  "        pm.test('Body includes value held on content', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['content']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on messageType', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                  "            pm.test('IDCM02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                  "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                  "      ",
                  "        pm.test('Body includes value held on content', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['content']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on messageType', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                  "            pm.test('IDCM02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "9d260dd1-0a30-4b22-876b-5078ed279f37"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "content",
                "value": "Dear $Parameter1. Here is the information of the promotion $Parameter2"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1911749f-05c7-4ea8-9f00-72a002e2daf2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4c86a974-dd2d-4288-92cf-1337bd36246e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "302"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              68,
              101,
              97,
              114,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              49,
              46,
              32,
              72,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              109,
              111,
              116,
              105,
              111,
              110,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              50,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              77,
              83,
              34,
              44,
              34,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              114,
              34,
              58,
              91,
              123,
              125,
              93,
              44,
              34,
              115,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              123,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              54,
              56,
              49,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 302
        },
        "id": "ccc1a0de-7d4a-4148-bba1-6fe77abf5c1a",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has content attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has messageType attribute",
            "skipped": false
          },
          {
            "assertion": "Response has receiver attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on content",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on messageType",
            "skipped": false
          },
          {
            "assertion": "content is Dear $Parameter1. Here is the information of the promotion $Parameter2",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8681/tmf-api/communicationManagement/v4/communicationMessage/031b58be-8903-44fc-9b79-9e0d34cbb3ff",
            "skipped": false
          },
          {
            "assertion": "id is 031b58be-8903-44fc-9b79-9e0d34cbb3ff",
            "skipped": false
          },
          {
            "assertion": "messageType is SMS",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0da54396-22af-4998-ade7-71aee62a68b9",
          "length": 13,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3e298112-ce94-41e8-9fb7-dca64fcde863"
        },
        "item": {
          "id": "e2f30ca6-8fa0-49d3-a919-21533d954147",
          "name": "/communicationMessage?fields=href",
          "request": {
            "description": {
              "content": "This operation filter a CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "href"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e3e95f78-73c9-4bbe-8b32-f010b56bdf3f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "0187bbb5-5db0-46cb-a90a-1e079343cb5f"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "href"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c715b082-cf0f-4cd5-93de-58080414ad5f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fb2893a8-17da-40fc-834f-5653d8bbd85c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "171"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              54,
              56,
              49,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 171
        },
        "id": "e2f30ca6-8fa0-49d3-a919-21533d954147"
      },
      {
        "cursor": {
          "ref": "6fdeac25-0aba-49c5-839b-7688a624264e",
          "length": 13,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8fd0cdf0-9baa-4db7-8548-b484fbe3d260"
        },
        "item": {
          "id": "c53c416a-3c46-4490-ac18-37d398876e1b",
          "name": "/communicationMessage?fields=id",
          "request": {
            "description": {
              "content": "This operation filter a CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "id"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8b8d74bb-184c-4885-9b9b-1abcefc474a1",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "bef1b443-2f3d-4923-b6f7-f1edb2095dd7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "id"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0f8b888d-e303-409e-b35a-67192379f356",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "249835b1-f74f-4f30-b955-ae1bd72ec0f3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "171"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              54,
              56,
              49,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 171
        },
        "id": "c53c416a-3c46-4490-ac18-37d398876e1b"
      },
      {
        "cursor": {
          "ref": "76cdeb7c-3b1d-403c-9714-651b0699efe8",
          "length": 13,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1e39d727-7932-470f-bb07-a9f0d76cdf97"
        },
        "item": {
          "id": "b0ebc9ee-fce6-4599-a50b-a5676de06022",
          "name": "/communicationMessage?id={{IDCM01}}",
          "request": {
            "description": {
              "content": "This operation filter a CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDCM01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a2a1e98-86ad-49d2-bbf8-4878f3d2ce10",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                  "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                  "      ",
                  "        pm.test('Body includes value held on content', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['content']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on messageType', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                  "            pm.test('IDCM02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                  "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                  "      ",
                  "        pm.test('Body includes value held on content', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['content']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on messageType', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                  "            pm.test('IDCM02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "da74f9a5-383a-424c-bdf5-9eaac08434c7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": "031b58be-8903-44fc-9b79-9e0d34cbb3ff"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "22c38710-c8ff-4d3c-80e8-076966c7bbca",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "18bc107a-7915-44df-9717-53f964987cfb",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "302"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              68,
              101,
              97,
              114,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              49,
              46,
              32,
              72,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              109,
              111,
              116,
              105,
              111,
              110,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              50,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              77,
              83,
              34,
              44,
              34,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              114,
              34,
              58,
              91,
              123,
              125,
              93,
              44,
              34,
              115,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              123,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              54,
              56,
              49,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 302
        },
        "id": "b0ebc9ee-fce6-4599-a50b-a5676de06022",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has content attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has messageType attribute",
            "skipped": false
          },
          {
            "assertion": "Response has receiver attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on content",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on messageType",
            "skipped": false
          },
          {
            "assertion": "content is Dear $Parameter1. Here is the information of the promotion $Parameter2",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8681/tmf-api/communicationManagement/v4/communicationMessage/031b58be-8903-44fc-9b79-9e0d34cbb3ff",
            "skipped": false
          },
          {
            "assertion": "id is 031b58be-8903-44fc-9b79-9e0d34cbb3ff",
            "skipped": false
          },
          {
            "assertion": "messageType is SMS",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "60057a5c-863f-446f-b80e-b0dd7cc96005",
          "length": 13,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "37eda2c3-2fb5-4ed4-80a0-fd9d875ea1e5"
        },
        "item": {
          "id": "248e0bde-efe4-4bd9-b957-96de2471c71f",
          "name": "/communicationMessage?fields=messageType",
          "request": {
            "description": {
              "content": "This operation filter a CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "messageType"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41d60a06-6ad2-4cb5-b7dd-b0afd6a70f2b",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4d6adf94-d47a-4652-941e-01530b110690"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "messageType"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9f2f750e-4338-4fb7-8493-9c056facd9fc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5ae4e932-661c-47d5-b919-d9f5eb8309da",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "191"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              77,
              83,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              54,
              56,
              49,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 191
        },
        "id": "248e0bde-efe4-4bd9-b957-96de2471c71f"
      },
      {
        "cursor": {
          "ref": "3e9c0ebd-8963-4e0e-ad92-82173a2d4d7c",
          "length": 13,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "64277125-79b4-4561-9db0-aa8a5b2b685e"
        },
        "item": {
          "id": "b55b1658-a96c-4abf-bd9f-a0dfedb657ff",
          "name": "/communicationMessage?messageType={{MESSAGETYPECM01}}",
          "request": {
            "description": {
              "content": "This operation filter a CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [
                {
                  "key": "messageType",
                  "value": "{{MESSAGETYPECM01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aa7a15da-3fe5-4286-b165-aaa0bda36361",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                  "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                  "      ",
                  "        pm.test('Body includes value held on content', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['content']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on messageType', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                  "            pm.test('IDCM02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['content', 'href', 'id', 'messageType', 'receiver', 'sender'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has content attribute', function() { pm.expect(instance[\"content\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has messageType attribute', function() { pm.expect(instance[\"messageType\"]).to.be.a('string'); });",
                  "        pm.test('Response has receiver attribute', function() { pm.expect(instance[\"receiver\"]).to.be.a('array'); });",
                  "      ",
                  "        pm.test('Body includes value held on content', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['content']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on messageType', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['messageType']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDCM01\")) {",
                  "            pm.test('content is ' + pm.globals.get(\"CONTENTCM01\"), function() {pm.expect(instance['content']) == pm.globals.get('CONTENTCM01');});",
                  "            pm.test('href is ' + pm.globals.get(\"HREFCM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCM01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDCM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCM01');});",
                  "            pm.test('messageType is ' + pm.globals.get(\"MESSAGETYPECM01\"), function() {pm.expect(instance['messageType']) == pm.globals.get('MESSAGETYPECM01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDCM02\")) {",
                  "            pm.test('IDCM02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "67edca35-f4e3-4489-83ee-79ab4dba1376"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "messageType",
                "value": "SMS"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d6795a2a-d4ca-4d85-9355-bbb07fc46e7c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "cbc3cc16-fc54-4d26-a50d-471f71ecb722",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "302"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              68,
              101,
              97,
              114,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              49,
              46,
              32,
              72,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              109,
              111,
              116,
              105,
              111,
              110,
              32,
              36,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              50,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              77,
              83,
              34,
              44,
              34,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              114,
              34,
              58,
              91,
              123,
              125,
              93,
              44,
              34,
              115,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              123,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              58,
              56,
              54,
              56,
              49,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              99,
              111,
              109,
              109,
              117,
              110,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              48,
              51,
              49,
              98,
              53,
              56,
              98,
              101,
              45,
              56,
              57,
              48,
              51,
              45,
              52,
              52,
              102,
              99,
              45,
              57,
              98,
              55,
              57,
              45,
              57,
              101,
              48,
              100,
              51,
              52,
              99,
              98,
              98,
              51,
              102,
              102,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 302
        },
        "id": "b55b1658-a96c-4abf-bd9f-a0dfedb657ff",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false
          },
          {
            "assertion": "Response has content attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has messageType attribute",
            "skipped": false
          },
          {
            "assertion": "Response has receiver attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on content",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on messageType",
            "skipped": false
          },
          {
            "assertion": "content is Dear $Parameter1. Here is the information of the promotion $Parameter2",
            "skipped": false
          },
          {
            "assertion": "href is http://localhost:8681/tmf-api/communicationManagement/v4/communicationMessage/031b58be-8903-44fc-9b79-9e0d34cbb3ff",
            "skipped": false
          },
          {
            "assertion": "id is 031b58be-8903-44fc-9b79-9e0d34cbb3ff",
            "skipped": false
          },
          {
            "assertion": "messageType is SMS",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6000f139-e188-46b1-a302-8731d2c763c1",
          "length": 13,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a67f042f-3ef0-4ef0-92ab-524a8317e3d1"
        },
        "item": {
          "id": "ac185dae-d2c3-4049-aab0-9520d88d55c7",
          "name": "/communicationMessage/{{IDCM01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDCM01}}"
              ],
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e9b851cd-fdf1-479f-a8cd-ea07d31c23f1",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "  ",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "e33a60fa-dd4a-4109-80d6-22c9939a5f05"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage",
              "031b58be-8903-44fc-9b79-9e0d34cbb3ff"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "50578e90-4134-41ca-a9f2-8b350a282dbc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "570ca5ff-901b-4663-9ef9-d1a05ea91f8f",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 0
        },
        "id": "ac185dae-d2c3-4049-aab0-9520d88d55c7",
        "assertions": [
          {
            "assertion": "Status code is 204",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8b4b0c1a-9339-4370-a2ec-52007720fc01",
          "length": 13,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1ba950cf-3edd-44f0-8a28-707832e403e5"
        },
        "item": {
          "id": "20765e9f-3166-425c-8164-b4ed6621f75c",
          "name": "/communicationMessage/{{IDCM01}}404",
          "request": {
            "description": {
              "content": "This operation search for one of the created CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDCM01}}"
              ],
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac2a98e4-1aeb-447e-a9b9-7dc50ed6a17f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "338c74fd-14c8-4984-a3ad-b2abb55213b3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage",
              "031b58be-8903-44fc-9b79-9e0d34cbb3ff"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "95477785-256c-46d9-b510-dbef96dbdbc1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d8b03971-908c-4f61-8616-261949cb3dee",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "85"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              54,
              48,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              105,
              100,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 85
        },
        "id": "20765e9f-3166-425c-8164-b4ed6621f75c",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a1305c4a-bda1-4f39-9a57-4a02cb42f389",
          "length": 13,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3d497c54-e56c-4698-98ab-9fda1cd05aa3"
        },
        "item": {
          "id": "b75cf26d-6db9-47e9-848d-588067ceaae2",
          "name": "/communicationMessage/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created CommunicationMessage",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "8ce13dbe-ab17-45a3-bef7-f4207fd827fd"
              ],
              "host": [
                "{{Communication}}communicationMessage"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7432bba-cca2-4be0-abd8-a83c28849777",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "7d68d274-c68a-40cf-9854-e2a204a7b7de"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created CommunicationMessage",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8681",
            "path": [
              "tmf-api",
              "communicationManagement",
              "v4",
              "communicationMessage",
              "8ce13dbe-ab17-45a3-bef7-f4207fd827fd"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "553a3bf4-70b0-4f81-bc31-f7d76cc226d9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8681",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6517d9bf-58a1-4330-b29c-066f921681e7",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Fri, 16 Oct 2020 15:43:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "85"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              54,
              48,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              105,
              100,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 85
        },
        "id": "b75cf26d-6db9-47e9-848d-588067ceaae2",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 2765
    },
    "failures": [],
    "error": null
  }
}